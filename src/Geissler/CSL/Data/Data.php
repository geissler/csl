<?php
namespace Geissler\CSL\Data;

use Geissler\CSL\Container;

/**
 * Storage for the data to parse.
 *
 * @author Benjamin GeiÃŸler <benjamin.geissler@gmail.com>
 * @license MIT
 */
class Data
{
    /** @var array **/
    private $data;
    /** @var integer **/
    private $length;
    /** @var integer **/
    private $position;

    /**
     * Set the data for citation and bibliography.
     *
     * @param string $json JSON array
     * @return Data
     * @throws \ErrorException
     */
    public function set($json)
    {
        $data           =   json_decode($json, true);
        $this->length   =   count($data);

        if ($this->length > 0) {
            $this->data     =   $data;

            return $this->moveToFirst();
        }

        throw new \ErrorException('No data set!');
    }

    /**
     * Retrieve actual entry.
     *
     * @return array|null
     */
    public function get()
    {
        if (isset($this->data[$this->position]) == true) {
            return $this->data[$this->position];
        }

        return null;
    }

    /**
     * Retrieve a variable from the actual entry.
     *
     * @param string $name
     * @return string|integer|null
     */
    public function getVariable($name)
    {
        if (isset($this->data[$this->position]) == true
            && array_key_exists($name, $this->data[$this->position]) == true) {
                return $this->data[$this->position][$name];
        } elseif ($name == 'citation-number') {
            if (Container::getContext()->in('sort') == true) {
                // index (starting at 1) of the cited reference in the bibliography (generated by the CSL processor)
                $number   =   Container::getData()->getPosition();
                if (Container::getContext()->get('sort') == 'descending') {
                    $number =   Container::getData()->getLength() - $number;
                } else {
                    $number++;
                }

                $this->setVariable('citation-number', (int) $number);
                return (int) $number;
            } else {
                // return position in bibliography if no citation-number is set
                return (int) $this->position + 1;
            }
        }

        return null;
    }

    /**
     * Add a variable to the actual data entry.
     *
     * @param string $name
     * @param mixed $value
     * @return Data
     */
    public function setVariable($name, $value)
    {
        if ($this->get() !== null) {
            $this->data[$this->position][$name] = $value;
        }

        return $this;
    }

    /**
     * Access the actual position number.
     *
     * @return integer
     */
    public function getPosition()
    {
        return $this->position;
    }

    /**
     * Access the number of entries.
     *
     * @return int
     */
    public function getLength()
    {
        return $this->length;
    }

    /**
     * Move position to next entry.
     *
     * @return boolean
     */
    public function next()
    {
        Container::getContext()->getSubstitute()->clear();
        $this->position++;

        if ($this->position < $this->length) {
            return true;
        }

        return false;
    }

    /**
     * Changes the data position to the item with the given id.
     *
     * @param integer|string $id
     * @return boolean
     */
    public function moveToId($id)
    {
        Container::getContext()->getSubstitute()->clear();
        for ($i = 0; $i < $this->length; $i++) {
            if (isset($this->data[$i]['id']) == true
                && $this->data[$i]['id'] == $id) {
                $this->position =   $i;
                return true;
            }
        }

        return false;
    }

    /**
     * Apply new order.
     *
     * @param array $newOrder
     * @return bool
     */
    public function sort(array $newOrder)
    {
        $copy   =   array();

        foreach ($newOrder as $id) {
            $this->moveToId($id);
            $copy[] =   $this->get();
        }

        if (count($copy) == $this->length) {
            $this->data =   $copy;
            $this->moveToFirst();
            return true;
        }

        return false;
    }

    /**
     * Move to first entry.
     *
     * @return Data
     */
    public function moveToFirst()
    {
        Container::getContext()->getSubstitute()->clear();
        $this->position =   0;

        return $this;
    }

    public function dump()
    {
        var_dump($this->data);
    }
}
