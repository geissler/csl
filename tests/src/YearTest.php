<?php
namespace Geissler\CSL\Date;

use Geissler\CSL\Factory;
use Geissler\CSL\Container;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-03 at 23:42:29.
 */
class YearTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Year
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderLong()
    {
        $layout = '<date-part name="year" range-delimiter="/"/>';
        $this->initElement($layout);
        $this->assertEquals('1984', $this->object->render('1984'));
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderAD()
    {
        $layout = '<date-part name="year" range-delimiter="/"/>';
        $this->initElement($layout);
        $this->assertEquals('79AD', $this->object->render('79'));
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderAD1()
    {
        $layout = '<date-part name="year" form="short"/>';
        $this->initElement($layout);
        $this->assertEquals('789AD', $this->object->render('789'));
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderBC()
    {
        $layout = '<date-part name="year" form="short"/>';
        $this->initElement($layout);
        $this->assertEquals('333BC', $this->object->render(-333));
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderBC1()
    {
        $layout = '<date-part name="year" form="short"/>';
        $this->initElement($layout);
        $this->assertEquals('31BC', $this->object->render('-31'));
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderBCGerman()
    {
        $layout = '<date-part name="year" form="short"/>';
        $this->initElement($layout, 'de');
        $this->assertEquals('31v. Chr.', $this->object->render('-31'));
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderShort()
    {
        $layout = '<date-part name="year" form="short"/>';
        $this->initElement($layout, 'de');
        $this->assertEquals('90', $this->object->render('1990'));
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderShort1()
    {
        $layout = '<date-part name="year" form="short"/>';
        $this->initElement($layout);
        $this->assertEquals('00', $this->object->render('1000'));
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderShort2()
    {
        $layout = '<date-part name="year" form="short"/>';
        $this->initElement($layout);
        $this->assertEquals('171AD', $this->object->render('171'));
    }

    /**
     * @covers Geissler\CSL\Date\Year::render
     */
    public function testRenderEmpty()
    {
        $layout = '<date-part name="year" form="short"/>';
        $this->initElement($layout);
        $this->assertEquals('', $this->object->render(''));
    }

    protected function initElement($layout, $language = 'en-US')
    {
        $xml = new \SimpleXMLElement($layout);
        $this->object   =   new Year($xml);

        $locale = Factory::locale();
        $locale->readFile($language);
        Container::setLocale($locale);
    }
}
