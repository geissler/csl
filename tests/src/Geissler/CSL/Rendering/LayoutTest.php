<?php
namespace Geissler\CSL\Rendering;

use Geissler\CSL\Container;
use Geissler\CSL\Data\Data;
use Geissler\CSL\Macro\Macro;
use Geissler\CSL\Data\CitationItems;
use Geissler\CSL\Options\Citation;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-02 at 16:18:57.
 */
class LayoutTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Layout
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new Layout;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Rendering\Layout::__construct
     * @covers Geissler\CSL\Rendering\Layout::render
     */
    public function testRender()
    {
        $layout = '<layout prefix="(" suffix=")" delimiter=", "><text variable="citation-number"/></layout>';
        $json   =   '[{
             "id": "ITEM-1",
            "citation-number" : 1}, {
             "id": "ITEM-2",
            "citation-number" : 2}]';
        $citation   =   '[
    [
        {
            "id": "ITEM-1"
        },
        {
            "id": "ITEM-2"
        }
    ]
]';
        $this->initElement($layout, $json, $citation);
        $result =   $this->object->render('');
        $this->assertInternalType('array', $result);
        $this->assertContains('(1, 2)', implode('', $result));
    }

    /**
     * @covers Geissler\CSL\Rendering\Layout::__construct
     * @covers Geissler\CSL\Rendering\Layout::render
     */
    public function testRender1()
    {
        $layout = '<layout delimiter="; ">
                      <text macro="author" />
                    </layout>';
        $json   =   '[
    {
        "author": [
            {
                "family": "Roe",
                "given": "Jane",
                "static-ordering": false
            }
        ],
        "id": "ITEM-1",
        "type": "book"
    },
    {
        "author": [
            {
                "family": "Doe",
                "given": "John",
                "static-ordering": false
            }
        ],
        "id": "ITEM-2",
        "type": "book"
    }
]';
        $macro = '<macro name="author">
    <names variable="author">
      <name form="short" />
    </names>
  </macro>';
        $citation   =   '[
    [
        {
            "id": "ITEM-1"
        },
        {
            "id": "ITEM-2"
        }
    ]
]';


        Container::addMacro('author', new Macro(new \SimpleXMLElement($macro)));
        $this->initElement($layout, $json, $citation);
        $result =   $this->object->render('');
        $this->assertInternalType('array', $result);
        $this->assertContains('Roe; Doe', implode('', $result));
    }

    public function testWrittenIn()
    {
        $layout =       '<layout prefix="(" suffix=")">
                          <group delimiter=" ">
                            <names variable="author">
                              <name form="short" />
                            </names>
                            <date variable="issued">
                              <date-part name="year" />
                            </date>
                          </group>
                        </layout>';
        $json = '[
            {
                "author": [
                    {
                        "family": "Smith",
                        "given": "John",
                        "static-ordering": false
                    }
                ],
                "id": "ITEM-1",
                "issued": {
                    "date-parts": [
                        [
                            "2000",
                            "2",
                            "15"
                        ]
                    ]
                },
                "title": "Book C",
                "type": "book"
            }
        ]';
        $citation   =   '[
            [
                {
                    "id": "ITEM-1",
                    "prefix": "As written in"
                }
            ]
        ]';
        $this->initElement($layout, $json, $citation);
        $result =   $this->object->render('');
        $this->assertInternalType('array', $result);
        $this->assertContains('(As written in Smith 2000)', implode('', $result));
    }

    protected function initElement($layout, $json, $citation, $mode = 'citation')
    {
        $data   =   new Data();
        $data->set($json);
        Container::setData($data);

        $citationItems  =   new CitationItems();
        $citationItems->set($citation);
        Container::setCitationItem($citationItems);
        Container::getContext()->setName($mode);

        $xml = new \SimpleXMLElement($layout);
        $this->object   =   new Layout($xml);
        $this->object->setOptions(new Citation(new \SimpleXMLElement('<xml/>')));
    }
}
