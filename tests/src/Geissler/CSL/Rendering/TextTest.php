<?php
namespace Geissler\CSL\Rendering;

use Geissler\CSL\Data\Data;
use Geissler\CSL\Container;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-02 at 22:52:52.
 */
class TextTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Text
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Rendering\Text::__construct
     * @covers Geissler\CSL\Rendering\Text::render
     * @covers Geissler\CSL\Rendering\Text::hasAccessEmptyVariable
     */
    public function testRender()
    {
        $layout = '<text value="blue" prefix="(" suffix=")"></text>';
        $this->initElement($layout);
        $this->assertEquals('(blue)', $this->object->render('blue'));
        $this->assertNull($this->object->hasAccessEmptyVariable());
    }

    /**
     * @covers Geissler\CSL\Rendering\Text::__construct
     * @covers Geissler\CSL\Rendering\Text::render
     */
    public function testRender1()
    {
        $layout = '<text value="blue" prefix="(" suffix=")" text-decoration="underline"></text>';
        $this->initElement($layout);
        $this->assertEquals('(<font style="text-decoration:underline">blue</font>)', $this->object->render('blue'));
    }

    /**
     * @covers Geissler\CSL\Rendering\Text::__construct
     * @covers Geissler\CSL\Rendering\Text::render
     * @covers Geissler\CSL\Rendering\Text::hasAccessEmptyVariable
     */
    public function testRender2()
    {
        $json = '[
    {
        "title": "His book",
        "id": "ITEM-1",
        "type": "book"
    },
    {
        "volume": "101",
        "id": "ITEM-2",
        "type": "book"
    }
]';
        $data   =   new Data();
        $data->set($json);
        Container::setData($data);

        $layout = '<text variable="title" prefix="(" suffix=")" text-decoration="underline" text-case="capitalize-first"></text>';
        $this->initElement($layout);
        $this->assertEquals('(<font style="text-decoration:underline">His book</font>)', $this->object->render('blue'));
        $this->assertFalse($this->object->hasAccessEmptyVariable());
    }

    /**
     * @covers Geissler\CSL\Rendering\Text::__construct
     * @covers Geissler\CSL\Rendering\Text::render
     * @covers Geissler\CSL\Rendering\Text::hasAccessEmptyVariable
     */
    public function testRenderTerm()
    {
        Container::getLocale()->readFile();
        $layout = '<text term="book" plural="true" prefix="(" suffix=")" text-decoration="underline"></text>';
        $this->initElement($layout);
        $this->assertEquals('(<font style="text-decoration:underline">books</font>)', $this->object->render('blue'));
        $this->assertNull($this->object->hasAccessEmptyVariable());
    }

    /**
     * @covers Geissler\CSL\Rendering\Text::__construct
     * @covers Geissler\CSL\Rendering\Text::render
     * @covers Geissler\CSL\Rendering\Text::hasAccessEmptyVariable
     */
    public function testRenderGermanTerm()
    {
        Container::getLocale()->readFile('de');
        $layout = '<text term="book" plural="false" prefix="(" suffix=")" text-decoration="underline"></text>';
        $this->initElement($layout);
        $this->assertEquals('(<font style="text-decoration:underline">Buch</font>)', $this->object->render('blue'));
    }

    /**
     * @covers Geissler\CSL\Rendering\Text::__construct
     * @covers Geissler\CSL\Rendering\Text::render
     * @covers Geissler\CSL\Rendering\Text::hasAccessEmptyVariable
     */
    public function testRenderAndAccessEmpty()
    {
        $layout = '<text variable="title" prefix="(" suffix=")"></text>';
        $data   =   new Data();
        $data->set('[{}]');
        Container::setData($data);

        $this->initElement($layout);
        $this->assertEquals('()', $this->object->render('blue'));
        $this->assertTrue($this->object->hasAccessEmptyVariable());
    }

    protected function initElement($layout)
    {
        $xml = new \SimpleXMLElement($layout);
        $this->object   =   new Text($xml);
    }
}
