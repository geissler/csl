<?php
namespace Geissler\CSL\Rendering;

use Geissler\CSL\Factory;
use Geissler\CSL\Container;
use Geissler\CSL\Data\Data;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-04 at 22:39:26.
 */
class NumberTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Number
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     * @covers Geissler\CSL\Rendering\Number::hasAccessEmptyVariable
     */
    public function testRender()
    {
        $layout =   '<number variable="edition"/>';
        $json = '[
    {
        "id": "ITEM-1",
        "edition": "2",
        "type": "book"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals('2', $this->object->render(''));
        $this->assertFalse($this->object->hasAccessEmptyVariable());
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     */
    public function testRender1()
    {
        $layout =   '<number variable="edition" prefix=":"/>';
        $json = '[
    {
        "id": "ITEM-1",
        "edition": "23",
        "type": "book"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals(':23', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     * @covers Geissler\CSL\Rendering\Number::calcRoman
     * @covers Geissler\CSL\Rendering\Number::toRoman
     * @covers Geissler\CSL\Rendering\Number::formatDelimiter
     */
    public function testRenderRoman()
    {
        $layout =   '<number form="roman" variable="volume" />';
        $json = '[
    {
        "id": "item-1",
        "title": "Ignore me",
        "type": "book",
        "volume": "42"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals('xlii', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     * @covers Geissler\CSL\Rendering\Number::calcRoman
     * @covers Geissler\CSL\Rendering\Number::toRoman
     * @covers Geissler\CSL\Rendering\Number::formatDelimiter
     */
    public function testRenderRoman1()
    {
        $layout =   '<number form="roman" variable="volume" />';
        $json = '[
    {
        "id": "item-1",
        "title": "Ignore me",
        "type": "book",
        "volume": "XXIII"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals('XXIII', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     */
    public function testRenderOrdinal()
    {
        $layout =   '<number form="ordinal" variable="volume" />';
        $json = '[
    {
        "id": "item-1",
        "title": "Ignore me",
        "type": "book",
        "volume": "2"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals('2nd', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     */
    public function testRenderOrdinal1()
    {
        $layout =   '<number form="ordinal" variable="volume" />';
        $json = '[
    {
        "id": "item-1",
        "title": "Ignore me",
        "type": "book",
        "volume": "42"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals('42th', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     */
    public function testRenderLongOrdinal()
    {
        $layout =   '<number form="long-ordinal" variable="volume" />';
        $json = '[
    {
        "id": "item-1",
        "title": "Ignore me",
        "type": "book",
        "volume": "9"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals('ninth', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     */
    public function testRenderLongOrdinal1()
    {
        $layout =   '<number form="long-ordinal" variable="volume" />';
        $json = '[
    {
        "id": "item-1",
        "title": "Ignore me",
        "type": "book",
        "volume": "42"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals('42th', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     * @covers Geissler\CSL\Rendering\Number::hasAccessEmptyVariable
     */
    public function testRenderNothing()
    {
        $layout =   '<number variable="edition"/>';
        $json = '[
    {
        "id": "ITEM-1",
        "edition": "Special Edition",
        "type": "book"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals('Special Edition', $this->object->render(''));
        $this->assertFalse($this->object->hasAccessEmptyVariable());
    }

    /**
     * @covers Geissler\CSL\Rendering\Number::__construct
     * @covers Geissler\CSL\Rendering\Number::render
     * @covers Geissler\CSL\Rendering\Number::hasAccessEmptyVariable
     */
    public function testRenderNothing1()
    {
        $layout =   '<number variable="number"/>';
        $json = '[
    {
        "id": "ITEM-1",
        "edition": "Special Edition",
        "type": "book"
    }
]';
        $this->initElement($layout, $json);
        $this->assertEquals('', $this->object->render(''));
        $this->assertTrue($this->object->hasAccessEmptyVariable());
    }

    protected function initElement($layout, $json, $language = 'en-US')
    {
        $locale = Factory::locale();
        $locale->readFile($language);
        Container::setLocale($locale);

        $data   =   new Data();
        $data->set($json);
        Container::setData($data);

        $xml = new \SimpleXMLElement($layout);
        $this->object   =   new Number($xml);
    }
}
