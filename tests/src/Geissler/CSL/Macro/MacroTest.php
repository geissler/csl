<?php
namespace Geissler\CSL\Macro;

use Geissler\CSL\Container;
use Geissler\CSL\Data\Data;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-12 at 13:41:40.
 */
class MacroTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Macro
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Macro\Macro::__construct
     * @covers Geissler\CSL\Macro\Macro::render
     */
    public function testRender()
    {
        $layout  =   '<macro name="title">
                        <choose>
                          <if type="book">
                            <text variable="title" font-style="italic"/>
                          </if>
                          <else>
                            <text variable="title"/>
                          </else>
                        </choose>
                      </macro>';
        $json   =   '[{
            "type" : "book",
            "title" : "My Book"}]';
        $this->initElement($layout, $json);
        $this->assertEquals('<font style="font-style:italic">My Book</font>', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Macro\Macro::__construct
     * @covers Geissler\CSL\Macro\Macro::render
     */
    public function testRender1()
    {
        $layout  =   '<macro name="title">
                        <choose>
                          <if type="book">
                            <text variable="title" font-style="italic"/>
                          </if>
                          <else>
                            <text variable="title"/>
                          </else>
                        </choose>
                      </macro>';
        $json   =   '[{
            "type" : "paper",
            "title" : "My Book"}]';
        $this->initElement($layout, $json);
        $this->assertEquals('My Book', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Macro\Macro::__construct
     * @covers Geissler\CSL\Macro\Macro::render
     * @covers Geissler\CSL\Macro\Macro::hasAccessEmptyVariable
     */
    public function testHasAccessEmptyVariable()
    {
        $layout  =   '<macro name="title">
                        <choose>
                          <if type="book">
                            <text variable="title" font-style="italic"/>
                          </if>
                          <else>
                            <text variable="title"/>
                          </else>
                        </choose>
                      </macro>';
        $json   =   '[{
            "type" : "paper",
            "title" : "My Book"}]';
        $this->initElement($layout, $json);
        $this->assertEquals('My Book', $this->object->render(''));
        $this->assertFalse($this->object->hasAccessEmptyVariable());
    }

    /**
     * @covers Geissler\CSL\Macro\Macro::__construct
     * @covers Geissler\CSL\Macro\Macro::render
     * @covers Geissler\CSL\Macro\Macro::hasAccessEmptyVariable
     */
    public function testHasAccessEmptyVariable1()
    {
        $layout  =   '<macro name="title">
                        <text variable="title"/>
                      </macro>';
        $json   =   '[{
            "type" : "paper"}]';
        $this->initElement($layout, $json);
        $this->assertEquals('', $this->object->render(''));
        $this->assertTrue($this->object->hasAccessEmptyVariable());
    }

    protected function initElement($layout, $json)
    {
        $data   =   new Data();
        $data->set($json);
        Container::setData($data);

        $this->object   =   new Macro(new \SimpleXMLElement($layout));
    }
}
