<?php
namespace Geissler\CSL\Choose;

use Geissler\CSL\Container;
use Geissler\CSL\Data\Data;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-04 at 23:02:28.
 */
class IsNumericTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var IsNumeric
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidate()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": 5,
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidate1()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "5",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidate2()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "5th",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidate3()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "D2",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidate4()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "L2d",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidate5()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "2, 3",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidate6()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "2-4",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidate7()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "2 & 4",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidate8()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "2nd",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidateAny()
    {
        $variable =   'edition issued';
        $json = '[
    {
        "issued" : 2,
        "edition": "second",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json, 'any');
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidateNotAny()
    {
        $variable =   'edition issued';
        $json = '[
    {
        "issued" : "first",
        "edition": "second",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json, 'any');
        $this->assertFalse($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidateNone()
    {
        $variable =   'edition issued';
        $json = '[
    {
        "issued" : "first",
        "edition": "second",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json, 'none');
        $this->assertTrue($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testValidateNotNone()
    {
        $variable =   'edition issued';
        $json = '[
    {
        "issued" : "1",
        "edition": "second",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json, 'none');
        $this->assertFalse($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testDoNotValidate()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "second",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertFalse($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testDoNotValidate1()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "2nd edition",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertFalse($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testDoNotValidate2()
    {
        $variable =   'edition';
        $json = '[
    {
        "edition": "second",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertFalse($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testDoNotValidate3()
    {
        $variable =   'issued edition';
        $json = '[
    {
        "issued" : 2,
        "edition": "second",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json);
        $this->assertFalse($this->object->validate());
    }

    /**
     * @covers Geissler\CSL\Choose\IsNumeric::__construct
     * @covers Geissler\CSL\Choose\IsNumeric::validate
     * @covers Geissler\CSL\Choose\IsNumeric::validateVariable
     */
    public function testDoNotValidate4()
    {
        $variable =   'issued edition';
        $json = '[
    {
        "issued" : 2,
        "edition": "second",
        "id": "ITEM-1",
        "type": "book"
    }
]';
        $this->initElement($variable, $json, '');
        $this->assertFalse($this->object->validate());
    }

    protected function initElement($variable, $json, $match = 'all')
    {
        $data   =   new Data();
        $data->set($json);
        Container::setData($data);

        $this->object   =   new IsNumeric($variable, $match);
    }
}
