<?php
namespace Geissler\CSL\Date;

use Geissler\CSL\Factory;
use Geissler\CSL\Container;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-03 at 22:55:54.
 */
class MonthTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Month
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     * @covers Geissler\CSL\Date\Month::getMonthNumber
     * @covers Geissler\CSL\Date\Month::findMonth
     * @covers Geissler\CSL\Date\Month::getLocale
     */
    public function testRenderLong()
    {
        $layout =   '<date-part name="month" suffix=" "/>';
        $this->initElement($layout);
        $this->assertEquals('January', $this->object->render('January'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     * @covers Geissler\CSL\Date\Month::getMonthNumber
     * @covers Geissler\CSL\Date\Month::findMonth
     * @covers Geissler\CSL\Date\Month::getLocale
     */
    public function testRenderLong1()
    {
        $layout =   '<date-part name="month" suffix=" "/>';
        $this->initElement($layout);
        $this->assertEquals('January', $this->object->render('1'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     * @covers Geissler\CSL\Date\Month::getMonthNumber
     * @covers Geissler\CSL\Date\Month::findMonth
     * @covers Geissler\CSL\Date\Month::getLocale
     */
    public function testRenderLong2()
    {
        $layout =   '<date-part name="month" form="long"/>';
        $this->initElement($layout);
        $this->assertEquals('January', $this->object->render('01'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     * @covers Geissler\CSL\Date\Month::getMonthNumber
     * @covers Geissler\CSL\Date\Month::findMonth
     * @covers Geissler\CSL\Date\Month::getLocale
     */
    public function testRenderLongGerman()
    {
        $layout =   '<date-part name="month" suffix=" "/>';
        $this->initElement($layout, 'de');
        $this->assertEquals('Oktober', $this->object->render('10'));
    }


    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     * @covers Geissler\CSL\Date\Month::getLocale
     * @covers Geissler\CSL\Date\Month::getMonthNumber
     * @covers Geissler\CSL\Date\Month::findMonth
     */
    public function testRenderShort()
    {
        $layout =   '<date-part name="month" form="short"/>';
        $this->initElement($layout);
        $this->assertEquals('Jan.', $this->object->render(1));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     * @covers Geissler\CSL\Date\Month::getMonthNumber
     * @covers Geissler\CSL\Date\Month::findMonth
     * @covers Geissler\CSL\Date\Month::getLocale
     */
    public function testRenderShort1()
    {
        $layout =   '<date-part name="month" form="short"/>';
        $this->initElement($layout);
        $this->assertEquals('Jan.', $this->object->render('01'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     */
    public function testRenderShortFrench()
    {
        $layout =   '<date-part name="month" form="short"/>';
        $this->initElement($layout, 'fr');
        $this->assertEquals('févr.', $this->object->render('2'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     */
    public function testRenderNumericFrench()
    {
        $layout =   '<date-part name="month" form="numeric"/>';
        $this->initElement($layout, 'fr');
        $this->assertEquals('2', $this->object->render('févr.'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     */
    public function testRenderNumericGerman()
    {
        $layout =   '<date-part name="month" form="numeric"/>';
        $this->initElement($layout, 'de');
        $this->assertEquals('11', $this->object->render('November'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     */
    public function testRenderNumericGermanFromFrenchAsRaw()
    {
        $layout =   '<date-part name="month" form="numeric"/>';
        $this->initElement($layout, 'de');
        $this->assertEquals('févr.', $this->object->render('févr.'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     */
    public function testRenderNumeric()
    {
        $layout =   '<date-part name="month" form="numeric"/>';
        $this->initElement($layout, 'de');
        $this->assertEquals('11', $this->object->render('11'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     */
    public function testRenderNumeric1()
    {
        $layout =   '<date-part name="month" form="numeric"/>';
        $this->initElement($layout, 'de');
        $this->assertEquals('1', $this->object->render('01'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     */
    public function testRenderNumericEnglish()
    {
        $layout =   '<date-part name="month" form="numeric"/>';
        $this->initElement($layout);
        $this->assertEquals('1', $this->object->render('January'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     */
    public function testRenderNumericLeadingZeros()
    {
        $layout =   '<date-part name="month" form="numeric-leading-zeros"/>';
        $this->initElement($layout, 'de');
        $this->assertEquals('11', $this->object->render('11'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::__construct
     * @covers Geissler\CSL\Date\Month::render
     */
    public function testRenderNumericLeadingZeros1()
    {
        $layout =   '<date-part name="month" form="numeric-leading-zeros"/>';
        $this->initElement($layout, 'de');
        $this->assertEquals('01', $this->object->render('1'));
    }

    /**
     * @covers Geissler\CSL\Date\Month::render
     * @covers Geissler\CSL\Date\Month::modify
     */
    public function testModifyAndRender()
    {
        $layout =   '<date-part name="month" form="numeric"/>';
        $this->initElement($layout);
        $xml    =   new \SimpleXMLElement('<date-part name="month" form="numeric-leading-zeros"/>');
        $this->assertInstanceOf('\Geissler\CSL\Date\Month', $this->object->modify($xml));
        $this->assertEquals('01', $this->object->render('1'));
    }

    protected function initElement($layout, $language = 'en-US')
    {
        $xml = new \SimpleXMLElement($layout);
        $this->object   =   new Month($xml);

        $locale = Factory::locale();
        $locale->readFile($language);
        Container::setLocale($locale);
    }
}
