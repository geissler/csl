<?php
namespace Geissler\CSL\Data;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-02 at 20:55:26.
 */
class DataTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Data
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Data;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Data\Data::set
     */
    public function testDoNotSet()
    {
        $this->setExpectedException('ErrorException');
        $this->object->set('{');
    }

    /**
     * @covers Geissler\CSL\Data\Data::set
     */
    public function testSet()
    {
        $json = '[
    {
        "title": "His Book",
        "id": "ITEM-1",
        "type": "book"
    },
    {
        "volume": "101",
        "id": "ITEM-2",
        "type": "book"
    }
]';
        $this->assertTrue($this->object->set($json));
    }

    /**
     * @covers Geissler\CSL\Data\Data::get
     * @depends testSet
     */
    public function testGet()
    {
        $json = '[
    {
        "title": "His Book",
        "id": "ITEM-1",
        "type": "book"
    },
    {
        "volume": "101",
        "id": "ITEM-2",
        "type": "book"
    }
]';
        $this->assertTrue($this->object->set($json));
        $this->assertInternalType('array', $this->object->get());
        $data = $this->object->get();
        $this->assertEquals('His Book', $data['title']);
        $this->assertEquals('ITEM-1', $data['id']);
    }

    /**
     * @covers Geissler\CSL\Data\Data::get
     * @covers Geissler\CSL\Data\Data::next
     * @depends testGet
     */
    public function testGetNext()
    {
        $json = '[
    {
        "title": "His Book",
        "id": "ITEM-1",
        "type": "book"
    },
    {
        "volume": "101",
        "id": "ITEM-2",
        "type": "book"
    }
]';
        $this->assertTrue($this->object->set($json));
        $this->assertTrue($this->object->next());
        $this->assertInternalType('array', $this->object->get());
        $data = $this->object->get();
        $this->assertEquals('101', $data['volume']);
        $this->assertEquals('ITEM-2', $data['id']);
        $this->assertFalse($this->object->next());
        $this->assertNull($this->object->get());
    }

    /**
     * @covers Geissler\CSL\Data\Data::getVariable
     * @depends testSet
     */
    public function testGetVariable()
    {
        $json = '[
    {
        "title": "My Book",
        "edition": "5",
        "id": "ITEM-1",
        "type": "book"
    }]';
        $this->assertTrue($this->object->set($json));
        $this->assertInternalType('array', $this->object->get());
        $this->assertEquals('My Book', $this->object->getVariable('title'));
        $this->assertNull($this->object->getVariable('volume'));
    }

    /**
     * @covers Geissler\CSL\Data\Data::next
     * @depends testGet
     */
    public function testNext()
    {
        $json = '[
    {
        "title": "His Book",
        "id": "ITEM-1",
        "type": "book"
    },
    {
        "volume": "101",
        "id": "ITEM-2",
        "type": "book"
    }
]';
        $this->assertTrue($this->object->set($json));
        $this->assertTrue($this->object->next());
        $this->assertFalse($this->object->next());
    }

    /**
     * @covers Geissler\CSL\Data\Data::moveToId
     */
    public function testMoveToId()
    {
        $json = '[
    {
        "title": "His Book",
        "id": "ITEM-1",
        "type": "book"
    },
    {
        "volume": "101",
        "id": "ITEM-2",
        "type": "book"
    }
]';
        $this->assertTrue($this->object->set($json));
        $this->assertTrue($this->object->moveToId('ITEM-2'));
        $this->assertEquals('book', $this->object->getVariable('type'));
        $this->assertFalse($this->object->moveToId('ITEM-3'));
    }
}
