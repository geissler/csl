<?php
namespace Geissler\CSL\Names;

use Geissler\CSL\Factory;
use Geissler\CSL\Data\Data;
use Geissler\CSL\Container;
use Geissler\CSL\Citation\Citation;
use Geissler\CSL\Bibliography\Bibliography;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-05 at 14:57:24.
 */
class NameTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Name
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Names\Name::__construct
     * @covers Geissler\CSL\Names\Name::render
     */
    public function testRender()
    {
        $layout =   '<name and="text"/>';
        $data   =   array(
            array(
                "family" =>  "Doe",
                "given" => "John"),
            array(
                "family" =>  "Roe",
                "given" => "Jane")
        );

        $this->initElement($layout);

        $this->assertEquals('John Doe and Jane Roe', $this->object->render($data));
    }

    /**
     * @covers Geissler\CSL\Names\Name::__construct
     * @covers Geissler\CSL\Names\Name::render
     */
    public function testRenderDelimiterAndText()
    {
        $layout =   '<name delimiter=", " and="text" />';
        $data   =   array(
            array(
                "family" =>  "Doe",
                "given" => "John"),
            array(
                "family" =>  "Roe",
                "given" => "Jane")
        );

        $this->initElement($layout);

        $this->assertEquals('John Doe and Jane Roe', $this->object->render($data));
    }

    /**
     * @covers Geissler\CSL\Names\Name::__construct
     * @covers Geissler\CSL\Names\Name::render
     */
    public function testRenderDelimiterAndTextInContext()
    {
        $layout     =   '<name delimiter=", " and="text" />';
        $context    =   '<citation delimiter-precedes-last="always"/>';
        $data       =   array(
            array(
                "family" =>  "Doe",
                "given" => "John"),
            array(
                "family" =>  "Roe",
                "given" => "Jane")
        );

        $this->initElement($layout);

        $this->assertEquals('John Doe, and Jane Roe', $this->object->render($data));
    }

    /**
     * @covers Geissler\CSL\Names\Name::__construct
     * @covers Geissler\CSL\Names\Name::render
     */
    public function testRenderDelimiterAlways()
    {
        $layout =   '<name delimiter=", " and="text" delimiter-precedes-last="always"/>';
        $data   =   array(
            array(
                "family" =>  "Doe",
                "given" => "John"),
            array(
                "family" =>  "Roe",
                "given" => "Jane")
        );

        $this->initElement($layout);

        $this->assertEquals('John Doe, and Jane Roe', $this->object->render($data));
    }

    /**
     * @covers Geissler\CSL\Names\Name::__construct
     * @covers Geissler\CSL\Names\Name::render
     */
    public function testRenderEtAl()
    {
        $layout =   '<name delimiter=", " et-al-use-first="1" et-al-min="2"/>';
        $data   =   array(
            array(
                "family" =>  "Doe",
                "given" => "John"),
            array(
                "family" =>  "Roe",
                "given" => "Jane")
        );
        $this->initElement($layout);

        $this->assertEquals('John Doe et al.', $this->object->render($data));
    }

    /**
     * @covers Geissler\CSL\Names\Name::__construct
     * @covers Geissler\CSL\Names\Name::render
     */
    public function testRenderEtAl1()
    {
        $layout =   '<name delimiter=", " et-al-use-first="1" et-al-min="2" />';
        $data   =   array(
            array(
                "family" =>  "Doe",
                "given" => "John"),
            array(
                "family" =>  "Roe",
                "given" => "Jane")
        );
        $this->initElement($layout);

        $this->assertEquals('John Doe, et al.', $this->object->render($data));
    }

    protected function initElement($layout, $context = '<citation />', $language = 'en-US')
    {
        $locale = Factory::locale();
        $locale->readFile($language);
        Container::setLocale($locale);

        if (strpos($context, 'citation') !== false) {
            Container::getContext()->setName('citation');
            Container::setCitation(new Citation(new \SimpleXMLElement($context)));
        } else {
            Container::getContext()->setName('bibliography');
            Container::setCitation(new Bibliography(new \SimpleXMLElement($context)));
        }

        $xml = new \SimpleXMLElement($layout);
        $this->object   =   new Name($xml);
    }
}
