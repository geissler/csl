<?php
namespace Geissler\CSL\Names;

use Geissler\CSL\Factory;
use Geissler\CSL\Data\Data;
use Geissler\CSL\Container;
use Geissler\CSL\Style\Citation;
use Geissler\CSL\Style\Bibliography;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-09 at 23:47:08.
 */
class NamesTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Names
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Names\Names::__construct
     * @covers Geissler\CSL\Names\Names::render
     */
    public function testRender()
    {
        $layout =   '<names variable="author">
                    <name />
                    <substitute>
                      <names variable="editor" />
                    </substitute>
                  </names>';
        $json = '[
    {
        "editor": [
            {
                "family": "Doe",
                "given": "John",
                "static-ordering": false
            }
        ],
        "id": "item-1",
        "issued": {
            "date-parts": [
                [
                    "2000"
                ]
            ]
        },
        "title": "His Anonymous Life",
        "type": "book"
    }
]';
        $this->initElement($layout, $json);

        $this->assertEquals('John Doe', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Names\Names::__construct
     * @covers Geissler\CSL\Names\Names::render
     * @covers Geissler\CSL\Names\Names::hasAccessEmptyVariable
     */
    public function testRender1()
    {
        $layout =   '<names variable="author">
                    <name />
                    <substitute>
                      <names variable="editor author" />
                    </substitute>
                  </names>';
        $json = '[
    {
        "editor": [
            {
                "family": "Doe",
                "given": "John",
                "static-ordering": false
            }
        ],
        "id": "item-1",
        "issued": {
            "date-parts": [
                [
                    "2000"
                ]
            ]
        },
        "title": "His Anonymous Life",
        "type": "book"
    }
]';
        $this->initElement($layout, $json);

        $this->assertEquals('John Doe', $this->object->render(''));
        $this->assertFalse($this->object->hasAccessEmptyVariable());
    }

    /**
     * @covers Geissler\CSL\Names\Names::__construct
     * @covers Geissler\CSL\Names\Names::render
     */
    public function testRenderEditorAndTranslator()
    {
        $layout =   '
    <names variable="editor translator" delimiter="; ">
  <label prefix=" (" suffix=")"/>
</names>';
        $json = '[
    {
        "editor": [
            {
                "family": "Doe",
                "given": "John",
                "static-ordering": false
            }
        ],
        "translator": [
            {
                "family": "Doe",
                "given": "John",
                "static-ordering": false
            }
        ],
        "title": "His Anonymous Life",
        "type": "book"
    }
]';
        $this->initElement($layout, $json);

        $this->assertEquals('John Doe (editor & translator)', $this->object->render(''));
    }

    /**
     * @covers Geissler\CSL\Names\Names::__construct
     * @covers Geissler\CSL\Names\Names::render
     * @covers Geissler\CSL\Names\Names::hasAccessEmptyVariable
     */
    public function testRenderEditorAndTranslator1()
    {
        $layout =   '<names variable="editor translator" delimiter="; ">
                        <label prefix=" (" suffix=")"/>
                     </names>';
        $json = '[
    {
        "editor": [
            {
                "family": "Doe",
                "given": "John",
                "static-ordering": false
            }
        ],
        "translator": [
            {
                "family": "Johnson",
                "given": "John",
                "static-ordering": false
            }
        ],
        "title": "His Anonymous Life",
        "type": "book"
    }
]';
        $this->initElement($layout, $json);

        $this->assertEquals('John Doe (editor); John Johnson (translator)', $this->object->render(''));
        $this->assertFalse($this->object->hasAccessEmptyVariable());
    }

    protected function initElement($layout, $json, $context = '<citation />', $language = 'en-US')
    {
        Container::clear();
        $locale = Factory::locale();
        $locale->readFile($language);
        Container::setLocale($locale);

        $data   =   new Data();
        $data->set($json);
        Container::setData($data);

        if (strpos($context, 'citation') !== false) {
            Container::getContext()->setName('citation');
            Container::setCitation(new Citation(new \SimpleXMLElement($context)));
        } else {
            Container::getContext()->setName('bibliography');
            Container::setBibliography(new Bibliography(new \SimpleXMLElement($context)));
        }

        $xml = new \SimpleXMLElement($layout);
        $this->object   =   new Names($xml);
    }
}
