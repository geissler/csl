<?php
namespace Geissler\CSL\Names;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-09 at 15:21:38.
 */
class NamePartTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var NamePart
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\CSL\Names\NamePart::__construct
     * @covers Geissler\CSL\Names\NamePart::render
     * @covers Geissler\CSL\Names\NamePart::isInverted
     */
    public function testRender()
    {
        $layout =   '<name-part name="family" prefix="(" suffix=")"/>';
        $this->initElement($layout);
        $data   =   array(
            'given' =>  'Jean',
            'dropping-particle' =>  'de',
            'non-dropping-particle' =>  'La',
            'family' =>  'Fontaine',
            'suffix' =>  'III');
        $this->assertEquals('(de La Fontaine III)', $this->object->render($data));
    }

    /**
     * @covers Geissler\CSL\Names\NamePart::__construct
     * @covers Geissler\CSL\Names\NamePart::render
     * @covers Geissler\CSL\Names\NamePart::isInverted
     */
    public function testRender1()
    {
        $layout =   '<name-part name="given" prefix="[" suffix="]"/>';
        $this->initElement($layout);
        $data   =   array(
            'given' =>  'Jean',
            'dropping-particle' =>  'de',
            'non-dropping-particle' =>  'La',
            'family' =>  'Fontaine',
            'suffix' =>  'III');
        $this->assertEquals('[Jean]', $this->object->render($data));
    }

    /**
     * @covers Geissler\CSL\Names\NamePart::__construct
     * @covers Geissler\CSL\Names\NamePart::render
     * @covers Geissler\CSL\Names\NamePart::isInverted
     */
    public function testRenderInverted()
    {
        $layout =   '<name-part name="given" prefix="[" suffix="]"/>';
        $this->initElement($layout);
        $data   =   array(
            'family' =>  'Fontaine',
            'given' =>  'Jean',
            'dropping-particle' =>  'de',
            'non-dropping-particle' =>  'La',
            'suffix' =>  'III');
        $this->assertEquals('[Jean de La]', $this->object->render($data));
    }

    protected function initElement($layout)
    {
        $xml = new \SimpleXMLElement($layout);
        $this->object   =   new NamePart($xml);
    }
}
